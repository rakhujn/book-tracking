diff --git a/TODO.md b/TODO.md
index f5edd6f..9ea1d44 100644
--- a/TODO.md
+++ b/TODO.md
@@ -5,3 +5,9 @@
 5. UI Adjustments (dark mode, user settings (hydration), ...)
 6. Deployment & CI/CD
 7. Google Analytics
+
+
+
+Fonts
+- Sans
+- Serif
diff --git a/index.html b/index.html
index 789a186..5dcd494 100644
--- a/index.html
+++ b/index.html
@@ -1,13 +1,27 @@
 <!DOCTYPE html>
 <html lang="en">
-  <head>
-    <meta charset="UTF-8" />
-    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
-    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
-    <title>Book Tracking</title>
-  </head>
-  <body>
-    <div id="root"></div>
-    <script type="module" src="/src/main.tsx"></script>
-  </body>
-</html>
+
+<head>
+  <meta charset="UTF-8" />
+  <link rel="icon" type="image/svg+xml" href="/vite.svg" />
+  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+  <title>Book Tracking</title>
+
+  <link rel="preconnect" href="https://fonts.googleapis.com">
+  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
+  <link href="https://fonts.googleapis.com/css2?family=Inria+Serif&display=swap" rel="stylesheet"><link href="https://fonts.googleapis.com/css2?family=Bubblegum+Sans&display=swap" rel="stylesheet"> <link rel="preconnect" href="https://fonts.googleapis.com">
+<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
+<link href="https://fonts.googleapis.com/css2?family=Lora&display=swap" rel="stylesheet">
+  <style>
+    * {
+     font-family: 'Lora', serif;
+    }
+  </style>
+</head>
+
+<body class="bg-light">
+  <div id="root"></div>
+  <script type="module" src="/src/main.tsx"></script>
+</body>
+
+</html>
\ No newline at end of file
diff --git a/src/components/BookItemRow.tsx b/src/components/BookItemRow.tsx
index 6b9eb5d..8f7559f 100644
--- a/src/components/BookItemRow.tsx
+++ b/src/components/BookItemRow.tsx
@@ -3,6 +3,7 @@ import { Book } from "../types/Book"
 import { deleteDoc, doc, updateDoc } from "firebase/firestore"
 import { db } from "../service/firebase"
 import { AuthContext, AuthContextValueType } from "../context/AuthContext"
+import { Trash } from "../icons/Trash"
 
 export const BookItemRow = ({ book }: BookItemRowProps): JSX.Element => {
     const [localBook, setLocalBook] = useState(book)
@@ -21,101 +22,93 @@ export const BookItemRow = ({ book }: BookItemRowProps): JSX.Element => {
         if (!authUser || !localBook.id) return
         const docRef = doc(db, "books", authUser.uid, "library", localBook.id)
         deleteDoc(docRef)
-            .then(() => { console.log("deleted") 
-        location.reload()
-        })
+            .then(() => {
+                console.log("deleted")
+                location.reload()
+            })
             .catch((e) => { console.error(e.message) })
     }
     return <>
-        <div className="card m-1 mx-2">
-            <div className="card-body">
-                <h5 className="card-title">{localBook.title.toUpperCase()}</h5>
-                <p className="card-text text-muted">Written by: {localBook.author}</p>
-                <div>
-                    <button onClick={deleteABook}>DELETE</button>
-                </div>
-
-                {/* Status */}
-                <div className="btn-group" role="group">
-                    {['read', 'reading', 'to-read'].map((status2, idx) => <div key={idx}>
-                        <input type="radio" className="btn-check" name={`btn_${localBook.id}_${idx}`}
-                            id={`btn_${localBook.id}_${idx}`} autoComplete="off"
-                            checked={status2 === localBook.status}
-                            onClick={() => setLocalBook(prev => { console.log(prev); return { ...prev, status: status2 } })}
-                        />
-
-                        <label className="btn btn-outline-primary" htmlFor={`btn_${localBook.id}_${idx}`}>
-                            {status2.split('-').map(itt => itt.charAt(0).toUpperCase() + itt.slice(1)).join(' ')}
-                        </label>
-                    </div>)}
-                </div>
+        <div className="col-12 col-md-6 col-lg-4">
+            <div className="card border-0 bg-light shadow my-1">
+                <div className="card-body">
+                    <div className="d-flex justify-content-between">
+                        <div>
+                            <h5 className="card-title">{localBook.title}</h5>
+                            <p className="card-text text-muted">{localBook.author}</p>
+                        </div>
+                        <div>
+                            <button onClick={deleteABook} className="btn btn-danger rounded-pill">
+                                <Trash />
+                            </button>
+                        </div>
+                    </div>
 
-                {/* Rating */}
-                <div className="row mb-3">
-                    <label htmlFor={`rating_${localBook.id}`} className="form-label">Rating</label>
-                    <div className="d-flex justify-content-between px-4">
+                    {/* Status */}
+                    <div className="btn-group" role="group">
+                        {['read', 'reading', 'to-read'].map((status2, idx) => <div key={idx}>
+                            <input type="radio" className="btn-check" name={`btn_${localBook.id}_${idx}`}
+                                id={`btn_${localBook.id}_${idx}`} autoComplete="off"
+                                checked={status2 === localBook.status}
+                                onClick={() => setLocalBook(prev => { console.log(prev); return { ...prev, status: status2 } })}
+                            />
 
-                        {[...Array(6)].map((_, i) => <div key={i} className={i === localBook.rating ? "text-primary" : ''}>
-                            {i}
+                            <label className="btn btn-outline-primary" htmlFor={`btn_${localBook.id}_${idx}`}>
+                                {status2.split('-').map(itt => itt.charAt(0).toUpperCase() + itt.slice(1)).join(' ')}
+                            </label>
                         </div>)}
                     </div>
-                    <input type="range" className="form-range px-3" min="0" max="5" step="1" id={`rating_${localBook.id}`}
-                        onChange={(event) => {
-                            setLocalBook((prev) => {
-                                return { ...prev, rating: parseInt(event.target.value) }
-                            })
-                        }}
-                        defaultValue={localBook.rating}
-                    />
-                </div>
 
-                {/* Pages */}
-                <div className="row mb-3">
-                    <label htmlFor={`pages_${localBook.id}`} className="form-label">Pages</label>
-                    <div className="d-flex justify-content-between px-4">
-                        <div>1</div>
-                        {/* <div>{localBook.pages.read}</div> */}
-                        <div>{localBook.pages.total}</div>
+                    {/* Rating */}
+                    <div className="row mb-3">
+                        <label htmlFor={`rating_${localBook.id}`} className="form-label">Rating</label>
+                        <div className="d-flex justify-content-between px-4">
+
+                            {[...Array(6)].map((_, i) => <div key={i} className={i === localBook.rating ? "text-primary" : ''}>
+                                {i}
+                            </div>)}
+                        </div>
+                        <input type="range" className="form-range px-3" min="0" max="5" step="1" id={`rating_${localBook.id}`}
+                            onChange={(event) => {
+                                setLocalBook((prev) => {
+                                    return { ...prev, rating: parseInt(event.target.value) }
+                                })
+                            }}
+                            defaultValue={localBook.rating}
+                        />
                     </div>
-                    <input
-                        min="1"
-                        step="1"
-                        id={`pages_${localBook.id}`}
-                        type="range"
-                        max={localBook.pages.total}
-                        className="form-range px-3"
-                        defaultValue={localBook.pages.read}
-                        onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
-                            setLocalBook(curr => {
-                                return { ...curr, pages: { ...curr.pages, read: parseInt(event.target.value) } }
-                            })
-                        }}
-                    />
-                    <div className="px-4">
-                        <div style={{ marginLeft: -8 + 420 * localBook.pages.read / localBook.pages.total }}>
-                            {localBook.pages.read}
+
+                    {/* Pages */}
+                    <div className="row mb-3">
+                        <label htmlFor={`pages_${localBook.id}`} className="form-label">Pages</label>
+                        <div className="d-flex justify-content-between px-4">
+                            <div>1</div>
+                            {/* <div>{localBook.pages.read}</div> */}
+                            <div>{localBook.pages.total}</div>
+                        </div>
+                        <input
+                            min="1"
+                            step="1"
+                            id={`pages_${localBook.id}`}
+                            type="range"
+                            max={localBook.pages.total}
+                            className="form-range px-3"
+                            defaultValue={localBook.pages.read}
+                            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {
+                                setLocalBook(curr => {
+                                    return { ...curr, pages: { ...curr.pages, read: parseInt(event.target.value) } }
+                                })
+                            }}
+                        />
+                        <div className="px-4">
+                            <div style={{ marginLeft: -8 + 420 * localBook.pages.read / localBook.pages.total }}>
+                                {localBook.pages.read}
+                            </div>
                         </div>
                     </div>
                 </div>
             </div>
         </div>
-        {/* 
-        {   
-            ...{
-                title: "..",
-                author: "",
-                status: "",
-                pages: {
-                    read: 200,
-                    total: 500,
-                },
-                rating: 1,
-            },
-            pages.read: new-value
-        }
-
-        20
-        */}
     </>
 
 }
diff --git a/src/components/BookList.tsx b/src/components/BookList.tsx
index 2207fe5..3bcc725 100644
--- a/src/components/BookList.tsx
+++ b/src/components/BookList.tsx
@@ -39,6 +39,10 @@ export const BookList = (): JSX.Element => {
             >New Book
             </a>
         </div>
-        {bookList.map((book, index) => <BookItemRow key={index} book={book} />)}
+        <div className="container-fluid">
+            <div className="row">
+                {bookList.map((book, index) => <BookItemRow key={index} book={book} />)}
+            </div>
+        </div>
     </>
 }
\ No newline at end of file
